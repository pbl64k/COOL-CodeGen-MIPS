# start of generated code
	.data
	.align	2
	.globl	class_nameTab
	.globl	Main_protObj
	.globl	Int_protObj
	.globl	String_protObj
	.globl	bool_const0
	.globl	bool_const1
	.globl	_int_tag
	.globl	_bool_tag
	.globl	_string_tag
_int_tag:
	.word	2
_bool_tag:
	.word	3
_string_tag:
	.word	4
	.globl	_MemMgr_INITIALIZER
_MemMgr_INITIALIZER:
	.word	_GenGC_Init
	.globl	_MemMgr_COLLECTOR
_MemMgr_COLLECTOR:
	.word	_GenGC_Collect
	.globl	_MemMgr_TEST
_MemMgr_TEST:
	.word	0
	.word	-1
str_const75:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const1
	.byte	0	
	.align	2
	.word	-1
str_const74:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Main"
	.byte	0	
	.align	2
	.word	-1
str_const73:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Term"
	.byte	0	
	.align	2
	.word	-1
str_const72:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"App"
	.byte	0	
	.align	2
	.word	-1
str_const71:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"Lambda"
	.byte	0	
	.align	2
	.word	-1
str_const70:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const5
	.ascii	"Variable"
	.byte	0	
	.align	2
	.word	-1
str_const69:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Expr"
	.byte	0	
	.align	2
	.word	-1
str_const68:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"LambdaListRef"
	.byte	0	
	.align	2
	.word	-1
str_const67:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const7
	.ascii	"LambdaListNE"
	.byte	0	
	.align	2
	.word	-1
str_const66:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const8
	.ascii	"LambdaList"
	.byte	0	
	.align	2
	.word	-1
str_const65:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"VarListNE"
	.byte	0	
	.align	2
	.word	-1
str_const64:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"VarList"
	.byte	0	
	.align	2
	.word	-1
str_const63:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"String"
	.byte	0	
	.align	2
	.word	-1
str_const62:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Bool"
	.byte	0	
	.align	2
	.word	-1
str_const61:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"Int"
	.byte	0	
	.align	2
	.word	-1
str_const60:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	"IO"
	.byte	0	
	.align	2
	.word	-1
str_const59:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"Object"
	.byte	0	
	.align	2
	.word	-1
str_const58:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const8
	.ascii	"_prim_slot"
	.byte	0	
	.align	2
	.word	-1
str_const57:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"SELF_TYPE"
	.byte	0	
	.align	2
	.word	-1
str_const56:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"_no_class"
	.byte	0	
	.align	2
	.word	-1
str_const55:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"<basic class>"
	.byte	0	
	.align	2
	.word	-1
str_const54:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"\n};\n};\n"
	.byte	0	
	.align	2
	.word	-1
str_const53:
	.word	4
	.word	11
	.word	String_dispTab
	.word	int_const12
	.ascii	"  main() : EvalObject {\n"
	.byte	0	
	.align	2
	.word	-1
str_const52:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"class Main {\n"
	.byte	0	
	.align	2
	.word	-1
str_const51:
	.word	4
	.word	17
	.word	String_dispTab
	.word	int_const13
	.ascii	"(*Generated by lam.cl (Jeff Foster, March 2000)*)\n"
	.byte	0	
	.align	2
	.word	-1
str_const50:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const14
	.ascii	"\n------------------cut here------------------\n"
	.byte	0	
	.align	2
	.word	-1
str_const49:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const15
	.ascii	"Generating code for "
	.byte	0	
	.align	2
	.word	-1
str_const48:
	.word	4
	.word	20
	.word	String_dispTab
	.word	int_const16
	.ascii	"  apply(y : EvalObject) : EvalObject { { abort(); self; } };\n"
	.byte	0	
	.align	2
	.word	-1
str_const47:
	.word	4
	.word	19
	.word	String_dispTab
	.word	int_const17
	.ascii	"  init(p : Closure) : Closure {{ parent <- p; self; }};\n"
	.byte	0	
	.align	2
	.word	-1
str_const46:
	.word	4
	.word	12
	.word	String_dispTab
	.word	int_const18
	.ascii	"  get_x() : EvalObject { x };\n"
	.byte	0	
	.align	2
	.word	-1
str_const45:
	.word	4
	.word	14
	.word	String_dispTab
	.word	int_const19
	.ascii	"  get_parent() : Closure { parent };\n"
	.byte	0	
	.align	2
	.word	-1
str_const44:
	.word	4
	.word	9
	.word	String_dispTab
	.word	int_const20
	.ascii	"  x : EvalObject;\n"
	.byte	0	
	.align	2
	.word	-1
str_const43:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const15
	.ascii	"  parent : Closure;\n"
	.byte	0	
	.align	2
	.word	-1
str_const42:
	.word	4
	.word	14
	.word	String_dispTab
	.word	int_const21
	.ascii	"class Closure inherits EvalObject {\n"
	.byte	0	
	.align	2
	.word	-1
str_const41:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const14
	.ascii	"  eval() : EvalObject { { abort(); self; } };\n"
	.byte	0	
	.align	2
	.word	-1
str_const40:
	.word	4
	.word	12
	.word	String_dispTab
	.word	int_const22
	.ascii	"class EvalObject inherits IO {\n"
	.byte	0	
	.align	2
	.word	-1
str_const39:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	" =>\n"
	.byte	0	
	.align	2
	.word	-1
str_const38:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"beta-reduce: "
	.byte	0	
	.align	2
	.word	-1
str_const37:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"z"
	.byte	0	
	.align	2
	.word	-1
str_const36:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"y"
	.byte	0	
	.align	2
	.word	-1
str_const35:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"x"
	.byte	0	
	.align	2
	.word	-1
str_const34:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"  esac)"
	.byte	0	
	.align	2
	.word	-1
str_const33:
	.word	4
	.word	17
	.word	String_dispTab
	.word	int_const23
	.ascii	"    o : Object => { abort(); new EvalObject; };\n"
	.byte	0	
	.align	2
	.word	-1
str_const32:
	.word	4
	.word	12
	.word	String_dispTab
	.word	int_const22
	.ascii	"    c : Closure => c.apply(y);\n"
	.byte	0	
	.align	2
	.word	-1
str_const31:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const7
	.ascii	"  case x of\n"
	.byte	0	
	.align	2
	.word	-1
str_const30:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	" in\n"
	.byte	0	
	.align	2
	.word	-1
str_const29:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const24
	.ascii	"     y : EvalObject <- "
	.byte	0	
	.align	2
	.word	-1
str_const28:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	",\n"
	.byte	0	
	.align	2
	.word	-1
str_const27:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const24
	.ascii	"(let x : EvalObject <- "
	.byte	0	
	.align	2
	.word	-1
str_const26:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	"))"
	.byte	0	
	.align	2
	.word	-1
str_const25:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	")@("
	.byte	0	
	.align	2
	.word	-1
str_const24:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	"(("
	.byte	0	
	.align	2
	.word	-1
str_const23:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"};\n"
	.byte	0	
	.align	2
	.word	-1
str_const22:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const25
	.ascii	";}};\n"
	.byte	0	
	.align	2
	.word	-1
str_const21:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const26
	.ascii	"      x <- y;\n"
	.byte	0	
	.align	2
	.word	-1
str_const20:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.byte	92
	.ascii	"n\");\n"
	.byte	0	
	.align	2
	.word	-1
str_const19:
	.word	4
	.word	13
	.word	String_dispTab
	.word	int_const27
	.ascii	"    { out_string(\"Applying closure "
	.byte	0	
	.align	2
	.word	-1
str_const18:
	.word	4
	.word	14
	.word	String_dispTab
	.word	int_const28
	.ascii	"  apply(y : EvalObject) : EvalObject {\n"
	.byte	0	
	.align	2
	.word	-1
str_const17:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const15
	.ascii	" inherits Closure {\n"
	.byte	0	
	.align	2
	.word	-1
str_const16:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"class Closure"
	.byte	0	
	.align	2
	.word	-1
str_const15:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"self))"
	.byte	0	
	.align	2
	.word	-1
str_const14:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"new Closure))"
	.byte	0	
	.align	2
	.word	-1
str_const13:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	").init("
	.byte	0	
	.align	2
	.word	-1
str_const12:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"((new Closure"
	.byte	0	
	.align	2
	.word	-1
str_const11:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"."
	.byte	0	
	.align	2
	.word	-1
str_const10:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.byte	92
	.byte	0	
	.align	2
	.word	-1
str_const9:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"get_x()"
	.byte	0	
	.align	2
	.word	-1
str_const8:
	.word	4
	.word	11
	.word	String_dispTab
	.word	int_const29
	.ascii	"Error:  free occurrence of "
	.byte	0	
	.align	2
	.word	-1
str_const7:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"get_parent()."
	.byte	0	
	.align	2
	.word	-1
str_const6:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const30
	.ascii	"\nError: Expr is pure virtual; can't gen_code\n"
	.byte	0	
	.align	2
	.word	-1
str_const5:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const31
	.ascii	"\nError: Expr is pure virtual; can't substitute\n"
	.byte	0	
	.align	2
	.word	-1
str_const4:
	.word	4
	.word	17
	.word	String_dispTab
	.word	int_const23
	.ascii	"\nError: Expr is pure virtual; can't beta-reduce\n"
	.byte	0	
	.align	2
	.word	-1
str_const3:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const31
	.ascii	"\nError: Expr is pure virtual; can't print self\n"
	.byte	0	
	.align	2
	.word	-1
str_const2:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	" "
	.byte	0	
	.align	2
	.word	-1
str_const1:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"\n"
	.byte	0	
	.align	2
	.word	-1
str_const0:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"lam-gc.cl"
	.byte	0	
	.align	2
	.word	-1
int_const31:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	47
	.word	-1
int_const30:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	45
	.word	-1
int_const29:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	27
	.word	-1
int_const28:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	39
	.word	-1
int_const27:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	35
	.word	-1
int_const26:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	14
	.word	-1
int_const25:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	5
	.word	-1
int_const24:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	23
	.word	-1
int_const23:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	48
	.word	-1
int_const22:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	31
	.word	-1
int_const21:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	36
	.word	-1
int_const20:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	18
	.word	-1
int_const19:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	37
	.word	-1
int_const18:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	30
	.word	-1
int_const17:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	56
	.word	-1
int_const16:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	61
	.word	-1
int_const15:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	20
	.word	-1
int_const14:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	46
	.word	-1
int_const13:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	50
	.word	-1
int_const12:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	24
	.word	-1
int_const11:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	2
	.word	-1
int_const10:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	7
	.word	-1
int_const9:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	9
	.word	-1
int_const8:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	10
	.word	-1
int_const7:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	12
	.word	-1
int_const6:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	13
	.word	-1
int_const5:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	8
	.word	-1
int_const4:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	6
	.word	-1
int_const3:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	3
	.word	-1
int_const2:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	4
	.word	-1
int_const1:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	0
	.word	-1
int_const0:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	1
	.word	-1
bool_const0:
	.word	3
	.word	4
	.word	Bool_dispTab
	.word	0
	.word	-1
bool_const1:
	.word	3
	.word	4
	.word	Bool_dispTab
	.word	1
# emitting nametab
class_nameTab:
# emitting name for (root) Object, tagged 0
	.word	str_const59
# emitting name for (basic) IO, tagged 1
	.word	str_const60
# emitting name for (basic) Int, tagged 2
	.word	str_const61
# emitting name for (basic) Bool, tagged 3
	.word	str_const62
# emitting name for (basic) String, tagged 4
	.word	str_const63
# emitting name for (non-basic) VarList, tagged 5
	.word	str_const64
# emitting name for (non-basic) VarListNE, tagged 6
	.word	str_const65
# emitting name for (non-basic) Expr, tagged 7
	.word	str_const69
# emitting name for (non-basic) Variable, tagged 8
	.word	str_const70
# emitting name for (non-basic) Lambda, tagged 9
	.word	str_const71
# emitting name for (non-basic) App, tagged 10
	.word	str_const72
# emitting name for (non-basic) Term, tagged 11
	.word	str_const73
# emitting name for (non-basic) Main, tagged 12
	.word	str_const74
# emitting name for (non-basic) LambdaList, tagged 13
	.word	str_const66
# emitting name for (non-basic) LambdaListNE, tagged 14
	.word	str_const67
# emitting name for (non-basic) LambdaListRef, tagged 15
	.word	str_const68
# emitting vtable for Object
Object_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
# emitting vtable for IO
IO_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
# emitting vtable for VarList
VarList_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	VarList.isNil
	.word	VarList.head
	.word	VarList.tail
	.word	VarList.add
	.word	VarList.print
# emitting vtable for VarListNE
VarListNE_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	VarListNE.isNil
	.word	VarListNE.head
	.word	VarListNE.tail
	.word	VarList.add
	.word	VarListNE.print
	.word	VarListNE.init
# emitting vtable for Expr
Expr_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Expr.print_self
	.word	Expr.beta
	.word	Expr.substitute
	.word	Expr.gen_code
# emitting vtable for Variable
Variable_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Variable.print_self
	.word	Variable.beta
	.word	Variable.substitute
	.word	Variable.gen_code
	.word	Variable.init
# emitting vtable for Lambda
Lambda_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Lambda.print_self
	.word	Lambda.beta
	.word	Lambda.substitute
	.word	Lambda.gen_code
	.word	Lambda.init
	.word	Lambda.apply
	.word	Lambda.gen_closure_code
# emitting vtable for App
App_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	App.print_self
	.word	App.beta
	.word	App.substitute
	.word	App.gen_code
	.word	App.init
# emitting vtable for Term
Term_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Term.var
	.word	Term.lam
	.word	Term.app
	.word	Term.i
	.word	Term.k
	.word	Term.s
# emitting vtable for Main
Main_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Term.var
	.word	Term.lam
	.word	Term.app
	.word	Term.i
	.word	Term.k
	.word	Term.s
	.word	Main.beta_reduce
	.word	Main.eval_class
	.word	Main.closure_class
	.word	Main.gen_code
	.word	Main.main
# emitting vtable for Int
Int_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
# emitting vtable for Bool
Bool_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
# emitting vtable for String
String_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	String.length
	.word	String.concat
	.word	String.substr
# emitting vtable for LambdaList
LambdaList_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	LambdaList.isNil
	.word	LambdaList.headE
	.word	LambdaList.headC
	.word	LambdaList.headN
	.word	LambdaList.tail
	.word	LambdaList.add
# emitting vtable for LambdaListNE
LambdaListNE_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	LambdaListNE.isNil
	.word	LambdaListNE.headE
	.word	LambdaListNE.headC
	.word	LambdaListNE.headN
	.word	LambdaListNE.tail
	.word	LambdaList.add
	.word	LambdaListNE.init
# emitting vtable for LambdaListRef
LambdaListRef_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	LambdaListRef.isNil
	.word	LambdaListRef.headE
	.word	LambdaListRef.headC
	.word	LambdaListRef.headN
	.word	LambdaListRef.reset
	.word	LambdaListRef.add
	.word	LambdaListRef.removeHead
# emitting prototype for Object
	.word	-1
Object_protObj:
	.word	0
	.word	3
	.word	Object_dispTab
# emitting prototype for IO
	.word	-1
IO_protObj:
	.word	1
	.word	3
	.word	IO_dispTab
# emitting prototype for VarList
	.word	-1
VarList_protObj:
	.word	5
	.word	3
	.word	VarList_dispTab
# emitting prototype for VarListNE
	.word	-1
VarListNE_protObj:
	.word	6
	.word	5
	.word	VarListNE_dispTab
	.word	0
	.word	0
# emitting prototype for Expr
	.word	-1
Expr_protObj:
	.word	7
	.word	3
	.word	Expr_dispTab
# emitting prototype for Variable
	.word	-1
Variable_protObj:
	.word	8
	.word	4
	.word	Variable_dispTab
	.word	str_const75
# emitting prototype for Lambda
	.word	-1
Lambda_protObj:
	.word	9
	.word	5
	.word	Lambda_dispTab
	.word	0
	.word	0
# emitting prototype for App
	.word	-1
App_protObj:
	.word	10
	.word	5
	.word	App_dispTab
	.word	0
	.word	0
# emitting prototype for Term
	.word	-1
Term_protObj:
	.word	11
	.word	3
	.word	Term_dispTab
# emitting prototype for Main
	.word	-1
Main_protObj:
	.word	12
	.word	3
	.word	Main_dispTab
# emitting prototype for Int
	.word	-1
Int_protObj:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	0
# emitting prototype for Bool
	.word	-1
Bool_protObj:
	.word	3
	.word	4
	.word	Bool_dispTab
	.word	0
# emitting prototype for String
	.word	-1
String_protObj:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const1
	.word	0
# emitting prototype for LambdaList
	.word	-1
LambdaList_protObj:
	.word	13
	.word	3
	.word	LambdaList_dispTab
# emitting prototype for LambdaListNE
	.word	-1
LambdaListNE_protObj:
	.word	14
	.word	7
	.word	LambdaListNE_dispTab
	.word	0
	.word	int_const1
	.word	0
	.word	0
# emitting prototype for LambdaListRef
	.word	-1
LambdaListRef_protObj:
	.word	15
	.word	5
	.word	LambdaListRef_dispTab
	.word	int_const1
	.word	0
# emitting prottab
class_protTab:
	.word	Object_protObj
	.word	IO_protObj
	.word	Int_protObj
	.word	Bool_protObj
	.word	String_protObj
	.word	VarList_protObj
	.word	VarListNE_protObj
	.word	Expr_protObj
	.word	Variable_protObj
	.word	Lambda_protObj
	.word	App_protObj
	.word	Term_protObj
	.word	Main_protObj
	.word	LambdaList_protObj
	.word	LambdaListNE_protObj
	.word	LambdaListRef_protObj
# emitting inittab
class_initTab:
	.word	Object_init
	.word	IO_init
	.word	Int_init
	.word	Bool_init
	.word	String_init
	.word	VarList_init
	.word	VarListNE_init
	.word	Expr_init
	.word	Variable_init
	.word	Lambda_init
	.word	App_init
	.word	Term_init
	.word	Main_init
	.word	LambdaList_init
	.word	LambdaListNE_init
	.word	LambdaListRef_init
	.globl	heap_start
heap_start:
	.word	0
	.text
	.globl	Main_init
	.globl	Int_init
	.globl	String_init
	.globl	Bool_init
	.globl	IO_init
	.globl	Main.main
# emitting initializer for Object
Object_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting initializer for IO
IO_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting initializer for VarList
VarList_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting initializer for VarListNE
VarListNE_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# initializing feature 0 (x, 0 locals)
# void for type Variable
	li	$a0 0
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
# initializing feature 1 (rest, 0 locals)
# void for type VarList
	li	$a0 0
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting initializer for Expr
Expr_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting initializer for Variable
Variable_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# initializing feature 0 (name, 0 locals)
# void for type String
	la	$a0 str_const75
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting initializer for Lambda
Lambda_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# initializing feature 0 (arg, 0 locals)
# void for type Variable
	li	$a0 0
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
# initializing feature 1 (body, 0 locals)
# void for type Expr
	li	$a0 0
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting initializer for App
App_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# initializing feature 0 (fun, 0 locals)
# void for type Expr
	li	$a0 0
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
# initializing feature 1 (arg, 0 locals)
# void for type Expr
	li	$a0 0
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting initializer for Term
Term_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting initializer for Main
Main_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting initializer for Int
Int_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting initializer for Bool
Bool_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting initializer for String
String_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting initializer for LambdaList
LambdaList_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting initializer for LambdaListNE
LambdaListNE_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# initializing feature 0 (lam, 0 locals)
# void for type Lambda
	li	$a0 0
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
# initializing feature 1 (num, 0 locals)
# void for type Int
	la	$a0 int_const1
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
# initializing feature 2 (env, 0 locals)
# void for type VarList
	li	$a0 0
	sw	$a0 20($s0)
	addiu	$a1 $s0 20
	jal	_GenGC_Assign
# initializing feature 3 (rest, 0 locals)
# void for type LambdaList
	li	$a0 0
	sw	$a0 24($s0)
	addiu	$a1 $s0 24
	jal	_GenGC_Assign
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting initializer for LambdaListRef
LambdaListRef_init:
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# initializing feature 0 (nextNum, 0 locals)
# int literal
	la	$a0 int_const1
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
# initializing feature 1 (l, 0 locals)
# void for type LambdaList
	li	$a0 0
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for VarList.isNil()
VarList.isNil:
# class has 1 attrs, 12 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# bool literal
	la	$a0 bool_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for VarList.head()
VarList.head:
# class has 1 attrs, 12 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_2
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_2:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
# new Variable
	la	$a0 Variable_protObj
	jal	Object.copy
	jal	Variable_init
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for VarList.tail()
VarList.tail:
# class has 1 attrs, 12 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_3
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_3:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
# new VarList
	la	$a0 VarList_protObj
	jal	Object.copy
	jal	VarList_init
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for VarList.add()
VarList.add:
# class has 1 attrs, 12 methods
# method has 1 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# .
# id
	lw	$a0 12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# new VarListNE
	la	$a0 VarListNE_protObj
	jal	Object.copy
	jal	VarListNE_init
	bne	$a0 $zero label_disp_ok_4
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_4:
	lw	$t1 8($a0)
	lw	$t1 48($t1)
	jalr	$t1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 16
	jr	$ra
# emitting code for VarList.print()
VarList.print:
# class has 1 attrs, 12 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# .
# str literal
	la	$a0 str_const1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_5
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_5:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for VarListNE.isNil()
VarListNE.isNil:
# class has 2 attrs, 13 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# bool literal
	la	$a0 bool_const0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for VarListNE.head()
VarListNE.head:
# class has 2 attrs, 13 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# id
	lw	$a0 12($s0)
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for VarListNE.tail()
VarListNE.tail:
# class has 2 attrs, 13 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# id
	lw	$a0 16($s0)
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for VarListNE.init()
VarListNE.init:
# class has 2 attrs, 13 methods
# method has 2 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# <-
# id
	lw	$a0 16($fp)
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
# <-
# id
	lw	$a0 12($fp)
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra
# emitting code for VarListNE.print()
VarListNE.print:
# class has 2 attrs, 13 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# id
	lw	$a0 12($s0)
	bne	$a0 $zero label_disp_ok_6
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_6:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const2
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_7
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_7:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	lw	$a0 16($s0)
	bne	$a0 $zero label_disp_ok_8
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_8:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for Expr.print_self()
Expr.print_self:
# class has 1 attrs, 11 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# str literal
	la	$a0 str_const3
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_9
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_9:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_10
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_10:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for Expr.beta()
Expr.beta:
# class has 1 attrs, 11 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# str literal
	la	$a0 str_const4
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_11
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_11:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_12
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_12:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for Expr.substitute()
Expr.substitute:
# class has 1 attrs, 11 methods
# method has 2 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# str literal
	la	$a0 str_const5
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_13
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_13:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_14
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_14:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra
# emitting code for Expr.gen_code()
Expr.gen_code:
# class has 1 attrs, 11 methods
# method has 2 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# str literal
	la	$a0 str_const6
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_15
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_15:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_16
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_16:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra
# emitting code for Variable.init()
Variable.init:
# class has 1 attrs, 12 methods
# method has 1 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# <-
# id
	lw	$a0 12($fp)
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 16
	jr	$ra
# emitting code for Variable.print_self()
Variable.print_self:
# class has 1 attrs, 12 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# .
# id
	lw	$a0 12($s0)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_17
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_17:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for Variable.beta()
Variable.beta:
# class has 1 attrs, 12 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for Variable.substitute()
Variable.substitute:
# class has 1 attrs, 12 methods
# method has 2 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# if .. then .. else
# =
# id
	lw	$a0 16($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	lw	$t1 4($sp)
	move	$t2 $a0
	beq	$t1 $t2 label_eq_true_18
label_eq_false_18:
	la	$a0 bool_const1
	la	$a1 bool_const0
	jal	equality_test
	b	label_eq_exit_18
label_eq_true_18:
	la	$a0 bool_const1
label_eq_exit_18:
	addiu	$sp $sp 4
	la	$t1 bool_const1
	beq	$a0 $t1 label_cond_true_19
label_cond_false_19:
# id
	move	$a0 $s0
	b	label_cond_exit_19
label_cond_true_19:
# id
	lw	$a0 12($fp)
label_cond_exit_19:
	nop
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra
# emitting code for Variable.gen_code()
Variable.gen_code:
# class has 1 attrs, 12 methods
# method has 2 formals, 1 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# allocating stack space for local slots
	addiu	$sp $sp -4
# let
# id
	lw	$a0 16($fp)
	sw	$a0 -4($fp)
# {}
# loop
label_loop_start_20:
# if .. then .. else
# .
# id
	lw	$a0 -4($fp)
	bne	$a0 $zero label_disp_ok_21
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_21:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
	la	$t1 bool_const1
	beq	$a0 $t1 label_cond_true_22
label_cond_false_22:
# complement
# =
# .
# id
	lw	$a0 -4($fp)
	bne	$a0 $zero label_disp_ok_23
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_23:
	lw	$t1 8($a0)
	lw	$t1 32($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	lw	$t1 4($sp)
	move	$t2 $a0
	beq	$t1 $t2 label_eq_true_24
label_eq_false_24:
	la	$a0 bool_const1
	la	$a1 bool_const0
	jal	equality_test
	b	label_eq_exit_24
label_eq_true_24:
	la	$a0 bool_const1
label_eq_exit_24:
	addiu	$sp $sp 4
	la	$t1 bool_const0
	beq	$a0 $t1 label_comp_true_25
label_comp_false_25:
	la	$a0 bool_const0
	b	label_comp_exit_25
label_comp_true_25:
	la	$a0 bool_const1
label_comp_exit_25:
	nop
	b	label_cond_exit_22
label_cond_true_22:
# bool literal
	la	$a0 bool_const0
label_cond_exit_22:
	nop
	la	$t1 bool_const0
	beq	$a0 $t1 label_loop_exit_20
# {}
# .
# str literal
	la	$a0 str_const7
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_26
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_26:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# <-
# .
# id
	lw	$a0 -4($fp)
	bne	$a0 $zero label_disp_ok_27
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_27:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 -4($fp)
	b	label_loop_start_20
label_loop_exit_20:
	li	$a0 0
# if .. then .. else
# .
# id
	lw	$a0 -4($fp)
	bne	$a0 $zero label_disp_ok_28
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_28:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
	la	$t1 bool_const1
	beq	$a0 $t1 label_cond_true_29
label_cond_false_29:
# .
# str literal
	la	$a0 str_const9
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_30
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_30:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
	b	label_cond_exit_29
label_cond_true_29:
# {}
# .
# str literal
	la	$a0 str_const8
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_31
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_31:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_32
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_32:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_33
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_33:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_34
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_34:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
# id
	move	$a0 $s0
label_cond_exit_29:
	nop
# deallocating locals from stack
	addiu	$sp $sp 4
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra
# emitting code for Lambda.init()
Lambda.init:
# class has 2 attrs, 14 methods
# method has 2 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# <-
# id
	lw	$a0 16($fp)
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
# <-
# id
	lw	$a0 12($fp)
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra
# emitting code for Lambda.print_self()
Lambda.print_self:
# class has 2 attrs, 14 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# str literal
	la	$a0 str_const10
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_35
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_35:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	lw	$a0 12($s0)
	bne	$a0 $zero label_disp_ok_36
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_36:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const11
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_37
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_37:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	lw	$a0 16($s0)
	bne	$a0 $zero label_disp_ok_38
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_38:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for Lambda.beta()
Lambda.beta:
# class has 2 attrs, 14 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for Lambda.apply()
Lambda.apply:
# class has 2 attrs, 14 methods
# method has 1 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# .
# id
	lw	$a0 12($s0)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 16($s0)
	bne	$a0 $zero label_disp_ok_39
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_39:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 16
	jr	$ra
# emitting code for Lambda.substitute()
Lambda.substitute:
# class has 2 attrs, 14 methods
# method has 2 formals, 2 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# allocating stack space for local slots
	addiu	$sp $sp -8
# if .. then .. else
# =
# id
	lw	$a0 16($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($s0)
	lw	$t1 4($sp)
	move	$t2 $a0
	beq	$t1 $t2 label_eq_true_40
label_eq_false_40:
	la	$a0 bool_const1
	la	$a1 bool_const0
	jal	equality_test
	b	label_eq_exit_40
label_eq_true_40:
	la	$a0 bool_const1
label_eq_exit_40:
	addiu	$sp $sp 4
	la	$t1 bool_const1
	beq	$a0 $t1 label_cond_true_41
label_cond_false_41:
# let
# .
# id
	lw	$a0 16($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 16($s0)
	bne	$a0 $zero label_disp_ok_42
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_42:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 -4($fp)
# let
# new Lambda
	la	$a0 Lambda_protObj
	jal	Object.copy
	jal	Lambda_init
	sw	$a0 -8($fp)
# .
# id
	lw	$a0 12($s0)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -4($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -8($fp)
	bne	$a0 $zero label_disp_ok_43
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_43:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
	b	label_cond_exit_41
label_cond_true_41:
# id
	move	$a0 $s0
label_cond_exit_41:
	nop
# deallocating locals from stack
	addiu	$sp $sp 8
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra
# emitting code for Lambda.gen_code()
Lambda.gen_code:
# class has 2 attrs, 14 methods
# method has 2 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# str literal
	la	$a0 str_const12
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_44
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_44:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# .
# id
	lw	$a0 16($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($fp)
	bne	$a0 $zero label_disp_ok_45
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_45:
	lw	$t1 8($a0)
	lw	$t1 32($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_46
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_46:
	lw	$t1 8($a0)
	lw	$t1 16($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const13
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_47
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_47:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# if .. then .. else
# .
# id
	lw	$a0 16($fp)
	bne	$a0 $zero label_disp_ok_48
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_48:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
	la	$t1 bool_const1
	beq	$a0 $t1 label_cond_true_49
label_cond_false_49:
# .
# str literal
	la	$a0 str_const15
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_50
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_50:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
	b	label_cond_exit_49
label_cond_true_49:
# .
# str literal
	la	$a0 str_const14
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_51
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_51:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
label_cond_exit_49:
	nop
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra
# emitting code for Lambda.gen_closure_code()
Lambda.gen_closure_code:
# class has 2 attrs, 14 methods
# method has 3 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# str literal
	la	$a0 str_const16
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_52
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_52:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	lw	$a0 20($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_53
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_53:
	lw	$t1 8($a0)
	lw	$t1 16($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const17
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_54
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_54:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const18
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_55
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_55:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const19
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_56
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_56:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	lw	$a0 20($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_57
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_57:
	lw	$t1 8($a0)
	lw	$t1 16($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const20
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_58
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_58:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const21
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_59
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_59:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# .
# id
	lw	$a0 12($s0)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 16($fp)
	bne	$a0 $zero label_disp_ok_60
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_60:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 16($s0)
	bne	$a0 $zero label_disp_ok_61
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_61:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const22
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_62
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_62:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const23
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_63
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_63:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 24
	jr	$ra
# emitting code for App.init()
App.init:
# class has 2 attrs, 12 methods
# method has 2 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# <-
# id
	lw	$a0 16($fp)
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
# <-
# id
	lw	$a0 12($fp)
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra
# emitting code for App.print_self()
App.print_self:
# class has 2 attrs, 12 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# str literal
	la	$a0 str_const24
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_64
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_64:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	lw	$a0 12($s0)
	bne	$a0 $zero label_disp_ok_65
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_65:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const25
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_66
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_66:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	lw	$a0 16($s0)
	bne	$a0 $zero label_disp_ok_67
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_67:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const26
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_68
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_68:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for App.beta()
App.beta:
# class has 2 attrs, 12 methods
# method has 0 formals, 3 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# allocating stack space for local slots
	addiu	$sp $sp -12
# case
# id
	lw	$a0 12($s0)
	bne	$a0 $zero label_case_ok_69
	la	$a0 str_const0
	li	$t1 1
	jal	_case_abort2
label_case_ok_69:
	sw	$a0 -4($fp)
	lw	$t2 0($a0)
# emitting branch for tag 7
	li	$t1 7
	bne	$t1 $t2 label_case_7_next_69
# let
# .
# id
	lw	$a0 12($s0)
	bne	$a0 $zero label_disp_ok_70
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_70:
	lw	$t1 8($a0)
	lw	$t1 32($t1)
	jalr	$t1
	sw	$a0 -8($fp)
# let
# new App
	la	$a0 App_protObj
	jal	Object.copy
	jal	App_init
	sw	$a0 -12($fp)
# .
# id
	lw	$a0 -8($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 16($s0)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -12($fp)
	bne	$a0 $zero label_disp_ok_71
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_71:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
	b	label_case_exit_69
label_case_7_next_69:
# emitting branch for tag 8
	li	$t1 8
	bne	$t1 $t2 label_case_8_next_69
# let
# .
# id
	lw	$a0 12($s0)
	bne	$a0 $zero label_disp_ok_72
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_72:
	lw	$t1 8($a0)
	lw	$t1 32($t1)
	jalr	$t1
	sw	$a0 -8($fp)
# let
# new App
	la	$a0 App_protObj
	jal	Object.copy
	jal	App_init
	sw	$a0 -12($fp)
# .
# id
	lw	$a0 -8($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 16($s0)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -12($fp)
	bne	$a0 $zero label_disp_ok_73
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_73:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
	b	label_case_exit_69
label_case_8_next_69:
# emitting branch for tag 9
	li	$t1 9
	bne	$t1 $t2 label_case_9_next_69
# .
# id
	lw	$a0 16($s0)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -4($fp)
	bne	$a0 $zero label_disp_ok_74
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_74:
	lw	$t1 8($a0)
	lw	$t1 48($t1)
	jalr	$t1
	b	label_case_exit_69
label_case_9_next_69:
# emitting branch for tag 10
	li	$t1 10
	bne	$t1 $t2 label_case_10_next_69
# let
# .
# id
	lw	$a0 12($s0)
	bne	$a0 $zero label_disp_ok_75
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_75:
	lw	$t1 8($a0)
	lw	$t1 32($t1)
	jalr	$t1
	sw	$a0 -8($fp)
# let
# new App
	la	$a0 App_protObj
	jal	Object.copy
	jal	App_init
	sw	$a0 -12($fp)
# .
# id
	lw	$a0 -8($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 16($s0)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -12($fp)
	bne	$a0 $zero label_disp_ok_76
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_76:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
	b	label_case_exit_69
label_case_10_next_69:
	jal	_case_abort
label_case_exit_69:
	nop
# deallocating locals from stack
	addiu	$sp $sp 12
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for App.substitute()
App.substitute:
# class has 2 attrs, 12 methods
# method has 2 formals, 3 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# allocating stack space for local slots
	addiu	$sp $sp -12
# let
# .
# id
	lw	$a0 16($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($s0)
	bne	$a0 $zero label_disp_ok_77
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_77:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 -4($fp)
# let
# .
# id
	lw	$a0 16($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 16($s0)
	bne	$a0 $zero label_disp_ok_78
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_78:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 -8($fp)
# let
# new App
	la	$a0 App_protObj
	jal	Object.copy
	jal	App_init
	sw	$a0 -12($fp)
# .
# id
	lw	$a0 -4($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -8($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -12($fp)
	bne	$a0 $zero label_disp_ok_79
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_79:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
# deallocating locals from stack
	addiu	$sp $sp 12
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra
# emitting code for App.gen_code()
App.gen_code:
# class has 2 attrs, 12 methods
# method has 2 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# str literal
	la	$a0 str_const27
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_80
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_80:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	lw	$a0 16($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($s0)
	bne	$a0 $zero label_disp_ok_81
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_81:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const28
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_82
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_82:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const29
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_83
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_83:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	lw	$a0 16($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 16($s0)
	bne	$a0 $zero label_disp_ok_84
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_84:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const30
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_85
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_85:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const31
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_86
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_86:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const32
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_87
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_87:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const33
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_88
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_88:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const34
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_89
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_89:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra
# emitting code for Term.var()
Term.var:
# class has 1 attrs, 13 methods
# method has 1 formals, 1 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# allocating stack space for local slots
	addiu	$sp $sp -4
# let
# new Variable
	la	$a0 Variable_protObj
	jal	Object.copy
	jal	Variable_init
	sw	$a0 -4($fp)
# .
# id
	lw	$a0 12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -4($fp)
	bne	$a0 $zero label_disp_ok_90
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_90:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
# deallocating locals from stack
	addiu	$sp $sp 4
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 16
	jr	$ra
# emitting code for Term.lam()
Term.lam:
# class has 1 attrs, 13 methods
# method has 2 formals, 1 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# allocating stack space for local slots
	addiu	$sp $sp -4
# let
# new Lambda
	la	$a0 Lambda_protObj
	jal	Object.copy
	jal	Lambda_init
	sw	$a0 -4($fp)
# .
# id
	lw	$a0 16($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -4($fp)
	bne	$a0 $zero label_disp_ok_91
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_91:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
# deallocating locals from stack
	addiu	$sp $sp 4
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra
# emitting code for Term.app()
Term.app:
# class has 1 attrs, 13 methods
# method has 2 formals, 1 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# allocating stack space for local slots
	addiu	$sp $sp -4
# let
# new App
	la	$a0 App_protObj
	jal	Object.copy
	jal	App_init
	sw	$a0 -4($fp)
# .
# id
	lw	$a0 16($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -4($fp)
	bne	$a0 $zero label_disp_ok_92
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_92:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
# deallocating locals from stack
	addiu	$sp $sp 4
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra
# emitting code for Term.i()
Term.i:
# class has 1 attrs, 13 methods
# method has 0 formals, 1 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# allocating stack space for local slots
	addiu	$sp $sp -4
# let
# .
# str literal
	la	$a0 str_const35
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_93
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_93:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
	sw	$a0 -4($fp)
# .
# id
	lw	$a0 -4($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -4($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_94
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_94:
	lw	$t1 8($a0)
	lw	$t1 32($t1)
	jalr	$t1
# deallocating locals from stack
	addiu	$sp $sp 4
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for Term.k()
Term.k:
# class has 1 attrs, 13 methods
# method has 0 formals, 2 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# allocating stack space for local slots
	addiu	$sp $sp -8
# let
# .
# str literal
	la	$a0 str_const35
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_95
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_95:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
	sw	$a0 -4($fp)
# let
# .
# str literal
	la	$a0 str_const36
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_96
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_96:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
	sw	$a0 -8($fp)
# .
# id
	lw	$a0 -4($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	lw	$a0 -8($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -4($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_97
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_97:
	lw	$t1 8($a0)
	lw	$t1 32($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_98
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_98:
	lw	$t1 8($a0)
	lw	$t1 32($t1)
	jalr	$t1
# deallocating locals from stack
	addiu	$sp $sp 8
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for Term.s()
Term.s:
# class has 1 attrs, 13 methods
# method has 0 formals, 3 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# allocating stack space for local slots
	addiu	$sp $sp -12
# let
# .
# str literal
	la	$a0 str_const35
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_99
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_99:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
	sw	$a0 -4($fp)
# let
# .
# str literal
	la	$a0 str_const36
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_100
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_100:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
	sw	$a0 -8($fp)
# let
# .
# str literal
	la	$a0 str_const37
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_101
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_101:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
	sw	$a0 -12($fp)
# .
# id
	lw	$a0 -4($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	lw	$a0 -8($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	lw	$a0 -12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# .
# id
	lw	$a0 -4($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_102
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_102:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	lw	$a0 -8($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_103
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_103:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_104
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_104:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_105
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_105:
	lw	$t1 8($a0)
	lw	$t1 32($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_106
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_106:
	lw	$t1 8($a0)
	lw	$t1 32($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_107
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_107:
	lw	$t1 8($a0)
	lw	$t1 32($t1)
	jalr	$t1
# deallocating locals from stack
	addiu	$sp $sp 12
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for Main.beta_reduce()
Main.beta_reduce:
# class has 1 attrs, 18 methods
# method has 1 formals, 2 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# allocating stack space for local slots
	addiu	$sp $sp -8
# {}
# .
# str literal
	la	$a0 str_const38
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_108
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_108:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	lw	$a0 12($fp)
	bne	$a0 $zero label_disp_ok_109
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_109:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
# let
# bool literal
	la	$a0 bool_const0
	sw	$a0 -4($fp)
# let
# void for type Expr
	li	$a0 0
	sw	$a0 -8($fp)
# {}
# loop
label_loop_start_110:
# complement
# id
	lw	$a0 -4($fp)
	la	$t1 bool_const0
	beq	$a0 $t1 label_comp_true_111
label_comp_false_111:
	la	$a0 bool_const0
	b	label_comp_exit_111
label_comp_true_111:
	la	$a0 bool_const1
label_comp_exit_111:
	nop
	la	$t1 bool_const0
	beq	$a0 $t1 label_loop_exit_110
# {}
# <-
# .
# id
	lw	$a0 12($fp)
	bne	$a0 $zero label_disp_ok_112
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_112:
	lw	$t1 8($a0)
	lw	$t1 32($t1)
	jalr	$t1
	sw	$a0 -8($fp)
# if .. then .. else
# =
# id
	lw	$a0 -8($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($fp)
	lw	$t1 4($sp)
	move	$t2 $a0
	beq	$t1 $t2 label_eq_true_113
label_eq_false_113:
	la	$a0 bool_const1
	la	$a1 bool_const0
	jal	equality_test
	b	label_eq_exit_113
label_eq_true_113:
	la	$a0 bool_const1
label_eq_exit_113:
	addiu	$sp $sp 4
	la	$t1 bool_const1
	beq	$a0 $t1 label_cond_true_114
label_cond_false_114:
# {}
# <-
# id
	lw	$a0 -8($fp)
	sw	$a0 12($fp)
# .
# str literal
	la	$a0 str_const39
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_115
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_115:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	lw	$a0 12($fp)
	bne	$a0 $zero label_disp_ok_116
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_116:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
	b	label_cond_exit_114
label_cond_true_114:
# <-
# bool literal
	la	$a0 bool_const1
	sw	$a0 -4($fp)
label_cond_exit_114:
	nop
	b	label_loop_start_110
label_loop_exit_110:
	li	$a0 0
# .
# str literal
	la	$a0 str_const1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_117
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_117:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# id
	lw	$a0 12($fp)
# deallocating locals from stack
	addiu	$sp $sp 8
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 16
	jr	$ra
# emitting code for Main.eval_class()
Main.eval_class:
# class has 1 attrs, 18 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# str literal
	la	$a0 str_const40
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_118
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_118:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const41
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_119
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_119:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const23
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_120
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_120:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for Main.closure_class()
Main.closure_class:
# class has 1 attrs, 18 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# str literal
	la	$a0 str_const42
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_121
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_121:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const43
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_122
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_122:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const44
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_123
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_123:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const45
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_124
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_124:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const46
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_125
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_125:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const47
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_126
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_126:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const48
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_127
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_127:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const23
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_128
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_128:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for Main.gen_code()
Main.gen_code:
# class has 1 attrs, 18 methods
# method has 1 formals, 4 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# allocating stack space for local slots
	addiu	$sp $sp -16
# let
# .
# new LambdaListRef
	la	$a0 LambdaListRef_protObj
	jal	Object.copy
	jal	LambdaListRef_init
	bne	$a0 $zero label_disp_ok_129
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_129:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
	sw	$a0 -4($fp)
# {}
# .
# str literal
	la	$a0 str_const49
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_130
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_130:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	lw	$a0 12($fp)
	bne	$a0 $zero label_disp_ok_131
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_131:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const50
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_132
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_132:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const51
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_133
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_133:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_134
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_134:
	lw	$t1 8($a0)
	lw	$t1 56($t1)
	jalr	$t1
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_135
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_135:
	lw	$t1 8($a0)
	lw	$t1 60($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const52
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_136
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_136:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const53
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_137
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_137:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# new VarList
	la	$a0 VarList_protObj
	jal	Object.copy
	jal	VarList_init
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -4($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($fp)
	bne	$a0 $zero label_disp_ok_138
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_138:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const54
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_139
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_139:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# loop
label_loop_start_140:
# complement
# .
# id
	lw	$a0 -4($fp)
	bne	$a0 $zero label_disp_ok_141
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_141:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
	la	$t1 bool_const0
	beq	$a0 $t1 label_comp_true_142
label_comp_false_142:
	la	$a0 bool_const0
	b	label_comp_exit_142
label_comp_true_142:
	la	$a0 bool_const1
label_comp_exit_142:
	nop
	la	$t1 bool_const0
	beq	$a0 $t1 label_loop_exit_140
# let
# .
# id
	lw	$a0 -4($fp)
	bne	$a0 $zero label_disp_ok_143
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_143:
	lw	$t1 8($a0)
	lw	$t1 16($t1)
	jalr	$t1
	sw	$a0 -8($fp)
# let
# .
# id
	lw	$a0 -4($fp)
	bne	$a0 $zero label_disp_ok_144
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_144:
	lw	$t1 8($a0)
	lw	$t1 20($t1)
	jalr	$t1
	sw	$a0 -12($fp)
# let
# .
# id
	lw	$a0 -4($fp)
	bne	$a0 $zero label_disp_ok_145
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_145:
	lw	$t1 8($a0)
	lw	$t1 24($t1)
	jalr	$t1
	sw	$a0 -16($fp)
# {}
# .
# id
	lw	$a0 -4($fp)
	bne	$a0 $zero label_disp_ok_146
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_146:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
# .
# id
	lw	$a0 -16($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -8($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -4($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 -12($fp)
	bne	$a0 $zero label_disp_ok_147
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_147:
	lw	$t1 8($a0)
	lw	$t1 52($t1)
	jalr	$t1
	b	label_loop_start_140
label_loop_exit_140:
	li	$a0 0
# .
# str literal
	la	$a0 str_const50
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_148
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_148:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# deallocating locals from stack
	addiu	$sp $sp 16
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 16
	jr	$ra
# emitting code for Main.main()
Main.main:
# class has 1 attrs, 18 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_149
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_149:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
	bne	$a0 $zero label_disp_ok_150
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_150:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_151
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_151:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_152
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_152:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
	bne	$a0 $zero label_disp_ok_153
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_153:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_154
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_154:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_155
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_155:
	lw	$t1 8($a0)
	lw	$t1 48($t1)
	jalr	$t1
	bne	$a0 $zero label_disp_ok_156
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_156:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
# .
# str literal
	la	$a0 str_const1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_157
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_157:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
# .
# .
# .
# .
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_158
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_158:
	lw	$t1 8($a0)
	lw	$t1 48($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_159
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_159:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_160
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_160:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_161
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_161:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_162
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_162:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_163
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_163:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_164
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_164:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_165
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_165:
	lw	$t1 8($a0)
	lw	$t1 52($t1)
	jalr	$t1
# .
# .
# .
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_166
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_166:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_167
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_167:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_168
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_168:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_169
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_169:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_170
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_170:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_171
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_171:
	lw	$t1 8($a0)
	lw	$t1 52($t1)
	jalr	$t1
# .
# .
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_172
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_172:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_173
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_173:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_174
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_174:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_175
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_175:
	lw	$t1 8($a0)
	lw	$t1 64($t1)
	jalr	$t1
# .
# .
# .
# .
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_176
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_176:
	lw	$t1 8($a0)
	lw	$t1 48($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_177
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_177:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_178
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_178:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_179
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_179:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_180
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_180:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_181
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_181:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_182
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_182:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_183
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_183:
	lw	$t1 8($a0)
	lw	$t1 64($t1)
	jalr	$t1
# .
# .
# .
# .
# .
# .
# .
# .
# .
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_184
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_184:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_185
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_185:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_186
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_186:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_187
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_187:
	lw	$t1 8($a0)
	lw	$t1 48($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_188
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_188:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_189
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_189:
	lw	$t1 8($a0)
	lw	$t1 48($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_190
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_190:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_191
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_191:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_192
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_192:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_193
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_193:
	lw	$t1 8($a0)
	lw	$t1 48($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_194
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_194:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_195
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_195:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_196
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_196:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_197
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_197:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_198
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_198:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_199
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_199:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_200
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_200:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_201
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_201:
	lw	$t1 8($a0)
	lw	$t1 64($t1)
	jalr	$t1
# .
# .
# .
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_202
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_202:
	lw	$t1 8($a0)
	lw	$t1 40($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_203
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_203:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_204
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_204:
	lw	$t1 8($a0)
	lw	$t1 48($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_205
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_205:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_206
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_206:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_207
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_207:
	lw	$t1 8($a0)
	lw	$t1 44($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_208
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_208:
	lw	$t1 8($a0)
	lw	$t1 48($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_209
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_209:
	lw	$t1 8($a0)
	lw	$t1 48($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_210
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_210:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_211
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_211:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_212
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_212:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_213
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_213:
	lw	$t1 8($a0)
	lw	$t1 64($t1)
	jalr	$t1
# int literal
	la	$a0 int_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaList.isNil()
LambdaList.isNil:
# class has 1 attrs, 9 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# bool literal
	la	$a0 bool_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaList.headE()
LambdaList.headE:
# class has 1 attrs, 9 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_214
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_214:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
# new VarList
	la	$a0 VarList_protObj
	jal	Object.copy
	jal	VarList_init
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaList.headC()
LambdaList.headC:
# class has 1 attrs, 9 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_215
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_215:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
# new Lambda
	la	$a0 Lambda_protObj
	jal	Object.copy
	jal	Lambda_init
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaList.headN()
LambdaList.headN:
# class has 1 attrs, 9 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_216
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_216:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
# int literal
	la	$a0 int_const1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaList.tail()
LambdaList.tail:
# class has 1 attrs, 9 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# .
# id
	move	$a0 $s0
	bne	$a0 $zero label_disp_ok_217
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_217:
	lw	$t1 8($a0)
	lw	$t1 0($t1)
	jalr	$t1
# new LambdaList
	la	$a0 LambdaList_protObj
	jal	Object.copy
	jal	LambdaList_init
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaList.add()
LambdaList.add:
# class has 1 attrs, 9 methods
# method has 3 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# .
# id
	lw	$a0 20($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 16($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	move	$a0 $s0
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# new LambdaListNE
	la	$a0 LambdaListNE_protObj
	jal	Object.copy
	jal	LambdaListNE_init
	bne	$a0 $zero label_disp_ok_218
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_218:
	lw	$t1 8($a0)
	lw	$t1 36($t1)
	jalr	$t1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 24
	jr	$ra
# emitting code for LambdaListNE.isNil()
LambdaListNE.isNil:
# class has 4 attrs, 10 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# bool literal
	la	$a0 bool_const0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaListNE.headE()
LambdaListNE.headE:
# class has 4 attrs, 10 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# id
	lw	$a0 20($s0)
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaListNE.headC()
LambdaListNE.headC:
# class has 4 attrs, 10 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# id
	lw	$a0 12($s0)
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaListNE.headN()
LambdaListNE.headN:
# class has 4 attrs, 10 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# id
	lw	$a0 16($s0)
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaListNE.tail()
LambdaListNE.tail:
# class has 4 attrs, 10 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# id
	lw	$a0 24($s0)
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaListNE.init()
LambdaListNE.init:
# class has 4 attrs, 10 methods
# method has 4 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# <-
# id
	lw	$a0 24($fp)
	sw	$a0 20($s0)
	addiu	$a1 $s0 20
	jal	_GenGC_Assign
# <-
# id
	lw	$a0 20($fp)
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
# <-
# id
	lw	$a0 16($fp)
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
# <-
# id
	lw	$a0 12($fp)
	sw	$a0 24($s0)
	addiu	$a1 $s0 24
	jal	_GenGC_Assign
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 28
	jr	$ra
# emitting code for LambdaListRef.isNil()
LambdaListRef.isNil:
# class has 2 attrs, 10 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# .
# id
	lw	$a0 16($s0)
	bne	$a0 $zero label_disp_ok_219
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_219:
	lw	$t1 8($a0)
	lw	$t1 12($t1)
	jalr	$t1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaListRef.headE()
LambdaListRef.headE:
# class has 2 attrs, 10 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# .
# id
	lw	$a0 16($s0)
	bne	$a0 $zero label_disp_ok_220
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_220:
	lw	$t1 8($a0)
	lw	$t1 16($t1)
	jalr	$t1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaListRef.headC()
LambdaListRef.headC:
# class has 2 attrs, 10 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# .
# id
	lw	$a0 16($s0)
	bne	$a0 $zero label_disp_ok_221
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_221:
	lw	$t1 8($a0)
	lw	$t1 20($t1)
	jalr	$t1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaListRef.headN()
LambdaListRef.headN:
# class has 2 attrs, 10 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# .
# id
	lw	$a0 16($s0)
	bne	$a0 $zero label_disp_ok_222
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_222:
	lw	$t1 8($a0)
	lw	$t1 24($t1)
	jalr	$t1
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaListRef.reset()
LambdaListRef.reset:
# class has 2 attrs, 10 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# <-
# int literal
	la	$a0 int_const1
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
# <-
# new LambdaList
	la	$a0 LambdaList_protObj
	jal	Object.copy
	jal	LambdaList_init
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra
# emitting code for LambdaListRef.add()
LambdaListRef.add:
# class has 2 attrs, 10 methods
# method has 2 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# <-
# .
# id
	lw	$a0 16($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($fp)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 12($s0)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# id
	lw	$a0 16($s0)
	bne	$a0 $zero label_disp_ok_223
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_223:
	lw	$t1 8($a0)
	lw	$t1 32($t1)
	jalr	$t1
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
# <-
# +
# id
	lw	$a0 12($s0)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# int literal
	la	$a0 int_const0
	jal	Object.copy
	lw	$t1 4($sp)
	lw	$t1 12($t1)
	lw	$t2 12($a0)
	add	$t1 $t1 $t2
	sw	$t1 12($a0)
	addiu	$sp $sp 4
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
# -
# id
	lw	$a0 12($s0)
	sw	$a0 0($sp)
	addiu	$sp $sp -4
# int literal
	la	$a0 int_const0
	jal	Object.copy
	lw	$t1 4($sp)
	lw	$t1 12($t1)
	lw	$t2 12($a0)
	sub	$t1 $t1 $t2
	sw	$t1 12($a0)
	addiu	$sp $sp 4
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 20
	jr	$ra
# emitting code for LambdaListRef.removeHead()
LambdaListRef.removeHead:
# class has 2 attrs, 10 methods
# method has 0 formals, 0 slots
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)
	addiu	$fp $sp 4
	move	$s0 $a0
# {}
# <-
# .
# id
	lw	$a0 16($s0)
	bne	$a0 $zero label_disp_ok_224
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label_disp_ok_224:
	lw	$t1 8($a0)
	lw	$t1 28($t1)
	jalr	$t1
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
# id
	move	$a0 $s0
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12
	jr	$ra

# end of generated code
